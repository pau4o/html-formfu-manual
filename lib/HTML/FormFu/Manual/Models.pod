=pod

=head1 NAME

HTML::FormFu::Manual::Models - Interaction with data stores via models

=head1 INTRODUCTION

One of the most powerful features of L<HTML::FormFu> is its ability to integrate with various data models and automatically perform opearations with the form values, e.g. updating the corresponding database fields. In this chapter we will dissect how L<HTML::FormFu> models work and how you can use them to dramatically reduce the development time for you applications.

=head1 AVAILABLE MODELS

Currently there are two models available for use with L<HTML::FormFu>: L<HTML::FormFu::Model::HashRef>, which ships with the core L<HTML::FormFu> distribution, and L<HTML::FormFu::Model::DBIC>, which is a package which you need to install separately. L<HTML::FormFu::Model::HashRef> allows you to fill in forms from a hashref, or save form values to a hashref. It can be useful if you are interacting with a datastore that is not supported by L<HTML::FormFu> but can process data stored in hashrefs. L<HTML::FormFu::Model::DBIC> is a much more complicated modules which links L<HTML::FormFu> with the powerful L<DBIx::Class> library.

=head1 WORKING WITH MODELS - THE BASICS

Every L<HTML::FormFu> model class provides several important methods that add new functionality to your form object:

=over

=item default_values

This method is similar to the C<default_values> method of the base L<HTML::FormFu> class, but while the C<$form-E<gt>default_values> accepts as its argument a simple hash of field names and their respective values, C<$form-E<gt>model-E<gt>default_values> allows us to fill in a form with default values from arguments that are specific to every model class. For example, L<HTML::FormFu::Model::HashRef> fills in default values from a hashref, while L<HTML::FormFu::Model::DBIC> fills in default values from a C<DBIx::Class::Result> object. Internally, each model class converts the values of its argument into a simple hash and passes its values to C<default_values> in L<HTML::FormFu>.

=item create

The C<create> method creates a new record from the values of the filled form. In the L<HTML::FormFu::Model::HashRef>, it creates a new hashref, and in the case of L<HTML::FormFu::Model::DBIC> creates a new C<DBIx::Class::Result> object and inserts it into the databse.

  if ($form->submitted_and_valid)
  {
    # take the submitted values and create a new
	# record in the database ???
    $form->model->create({});
  }

=item update

C<update> is similar to C<create>, but it updates an existing record rather than creating a new one. With L<HTML::FormFu::Model::DBIC> you need to provide as an argument to update a valid C<DBIx::Class::Result> object, and its values in the database will be updated with the ones submitted from the form. You will normally use C<update> in conjunction with C<default_values>: 

  # fetch a record from the database
  my $record = $dbic_resultset->find({ id => 5 });

  # load the data from the record into the form
  $form->model->default_values($record);

  # later on in the script ....
  if ($form->submitted_and_valid)
  {
    # take the submitted values, update the record object
	# and save to database
    $form->model->update($record);
  }
  
Another common pattern is to invoke C<create> without any values to create an empty object and then work with it:

  # create a new record
  my $new_record = $dbic_resultset->create({});

  # the above is identical to:
  my $new_record = $form->model->create({});

  # load the data from the record into the form
  $form->model->default_values($new_record);

  # later on in the script ....
  if ($form->submitted_and_valid)
  {
    # take the submitted values, update the record object
	# and save to database
    $form->model->update($record);
  }

For L<HTML::FormFu::Model::HashRef>, both C<create> and C<update> perform exactly the same function, i.e. they return a hashref representing the new record.

=back

=head1 USING HTML::FORMFU::MODEL::DBIC

The rest of this chapter will focus exclusively on L<HTML::FormFu::Model::DBIC>, since this is the  more complex module and the one that you are most likely to need in your applications.

=head2 Loading and configuring the model class

Use C<model> to specify which model class you want to load:
  
  # loads HTML::FormFu::Model::DBIC
  $form->model('DBIC');

Normally your form will work with a particular DBIx::Class schema. You specify the name of that schema by putting a C<model> entry in the form's stash:

  my $schema = My::Schema::Class->connect( ... );
  $form->stash( schema => $schema );

If you are working with Catalyst, you can just supply the name of a Catalyst model instead:

  $form->stash( schema => 'Model::My::Schema::Class' );

Although a form is normally associated with a particular L<DBIx::Class> result class, you do not normally have to specify which class that is. Instead, you pass an object of that class as the argument to C<default_values>, C<create> or C<update>. L<HTML::FormFu> will work happiliy as long as you have given it an object which has columns and relationships corresponding to the ones you have specified in the form definition.

Most of the model configuration happens via the C<model_config> method of individual form elements. We will describe some of the most important options below.

=head2 Populating select fields

Before we move on to displaying and updating data from the database, we will discuss a very important topic - loading options for select field from the database.

The C<options_from_model> method populates the options of group elements (e.g. a select, checkbox group, etc.) from the model. It is not available in L<HTML::FormFu::Model::HashRef>, and in L<HTML::FormFu::Model::DBIC> you are not supposed to call it directly, but it important to be aware of its existance since there are a number of configuratin options that affect its behavior.

There is one exception, however. If you want to preload the options of a select or checkbox group field with values from the database, you must explicitly tell L<HTML::FormFu> how to fetch them. You do this by specifying a L<DBIx::Class> result class that will return the list of possible options.If you need to narrow the results you can use a search condition. Last, you can choose which column from the database contains the labels that will be displayed for each field in the group.

=head2 Displaying and updating normal database fields

=head2 Displaying and updating fields from has_one and has_many relationships

=head2 Displaying and updating fields from many_to_many relationships

=cut

